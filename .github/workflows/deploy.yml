on:
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**/*'

  push:
    branches:
      - main
    paths:
      - 'infrastructure/**/*'

  workflow_run:
    workflows: ["build"]
    branches: [main]
    types:
      - completed
  
  # Use dispatched workflow to destroy infra to save $$
  workflow_dispatch:
    inputs:
      destroy:
        type: boolean
        description: Destroy environment?
        required: true
        default: false

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

env:
  tf_directory: infrastructure

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: tf
    defaults:
      run:
        working-directory: ./${{env.tf_directory}}
    
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_AUTH_GITHUB_CLIENT_ID: ${{ secrets.BACKSTAGE_AUTH_GITHUB_CLIENT_ID }}
      TF_VAR_AUTH_GITHUB_CLIENT_SECRET: ${{ secrets.BACKSTAGE_AUTH_GITHUB_CLIENT_SECRET }}
      TF_VAR_GITHUB_TOKEN: ${{ secrets.BACKSTAGE_GITHUB_TOKEN }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Log in to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      - name: Terraform Format Check
        continue-on-error: false
        run: terraform fmt -check
      
      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Destroy Arg Output
        id: destroy_arg
        run: |
          if [ $DESTROY == "true" ]; then
            echo "::set-output name=val::-destroy" 
          else
            echo "::set-output name=val:: "
          fi
        env:
          DESTROY: ${{ github.event.inputs.destroy }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false $DESTROY
        continue-on-error: true
        env:
          DESTROY: ${{ steps.destroy_arg.outputs.val }}

      - uses: actions/github-script@v6
        name: Update Pull Request
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve -input=false $DESTROY
        env:
          DESTROY: ${{ steps.destroy_arg.outputs.val }}
